/**
 * 
 */
package com.sid.java8.tutorials.Chapter18JavaCollection.Map;

import java.util.HashMap;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.WeakHashMap;

import com.sid.java8.tutorials.Chapter18JavaCollection.User;

/**
 * @author Lenovo
 *
 */
public class JavaCollectionMapExample {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("User", "1");
		map.put("User2", "2");
		map.put("User3", "3");
		map.put("User4", "4");

		System.out.println("Map : " + map);
		Map<User, String> map2 = new WeakHashMap<User, String>();
		map2.put(new User("abc", "xyz"), "1");
		map2.put(new User("usd", "sdlkHVl"), "2");
		map2.put(new User("saldhl", "eoiwu"), "3");
		System.out.println(map2.size());
		System.gc();
		System.out.println(map2.size());

		/**
		 * IdentityHashMap uses the == to compare the object. <br/>
		 * If an object didn't override the hashcode and equal method then the hashcode generated by the JVM
		 * will be compared. which will end up with different result.
		 */
		Map<String, String> map3 = new IdentityHashMap<String, String>();
		//map3.put(new String("User").intern(), "1");
		map3.put(new String("User"), "1");
		map3.put("User", "2");
		map3.put("User3", "3");
		map3.put("User4", "4");
		System.out.println(map3.size());

		/**
		 * We can add a null value at beginning of the Map but is we add any value after that we will get
		 * exception: java.lang.NullPointerException
		 */
		Map<String, String> name = new TreeMap<String, String>();
		//name.put(null, "String");
		name.put("A", "String");
		System.out.println(name);

		/**
		 * How to keep the insertion order in the treemap class.
		 */
		Map<Integer, String> mapTree = new TreeMap<Integer, String>((obj1, obj2) -> {
			return 1;
		});
		mapTree.put(10, "A");
		mapTree.put(0, "A");
		mapTree.put(20, "A");
		mapTree.put(15, "A");
		mapTree.put(11, "A");

		System.out.println(mapTree);
	}

}
